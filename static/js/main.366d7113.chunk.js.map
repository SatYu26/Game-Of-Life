{"version":3,"sources":["GameOfLife/GameOfLife.js","index.js"],"names":["GameOfLife","props","state","cells","initializeCells","isGameRunning","setInterval","live","columnIndex","field","columnsAmount","rowIndex","rowsAmount","cellState","DEAD","this","newCells","computeNewCellState","setState","aliveNeighboursAmount","computeAliveNeighboursAmount","ALIVE","neighbourOffsets","neighbourOffsetKey","newColumnOffset","newRowOffset","newCellsState","className","map","rows","renderColumn","cellModifier","onClick","toggleCellState","buttonLabel","toggleIsGameRunning","renderStartGameButton","renderCells","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.366d7113.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./GameOfLife.css\";\r\n\r\n/**\r\n * Game Of Life By John Conway\r\n * https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\r\n *\r\n * 1. Render grid\r\n * 2. Spawn life on click\r\n * 3. Implement game logic\r\n */\r\nexport default class GameOfLife extends React.Component {\r\n  static field = {\r\n    columnsAmount: 61,\r\n    rowsAmount: 41,\r\n  };\r\n  static cellState = {\r\n    ALIVE: true,\r\n    DEAD: false,\r\n  };\r\n\r\n  // region Initialization\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      cells: this.initializeCells(),\r\n      isGameRunning: false,\r\n    };\r\n\r\n    setInterval(() => this.live(), 200);\r\n  }\r\n\r\n  initializeCells() {\r\n    let cells = [];\r\n\r\n    for (\r\n      let columnIndex = 0;\r\n      columnIndex < GameOfLife.field.columnsAmount;\r\n      columnIndex++\r\n    ) {\r\n      cells[columnIndex] = [];\r\n      for (\r\n        let rowIndex = 0;\r\n        rowIndex < GameOfLife.field.rowsAmount;\r\n        rowIndex++\r\n      ) {\r\n        cells[columnIndex][rowIndex] = GameOfLife.cellState.DEAD;\r\n      }\r\n    }\r\n\r\n    return cells;\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region Game update logic\r\n\r\n  live() {\r\n    if (!this.state.isGameRunning) {\r\n      return;\r\n    }\r\n\r\n    const newCells = [];\r\n\r\n    for (\r\n      let columnIndex = 0;\r\n      columnIndex < GameOfLife.field.columnsAmount;\r\n      columnIndex++\r\n    ) {\r\n      newCells[columnIndex] = [];\r\n      for (\r\n        let rowIndex = 0;\r\n        rowIndex < GameOfLife.field.rowsAmount;\r\n        rowIndex++\r\n      ) {\r\n        newCells[columnIndex][rowIndex] = this.computeNewCellState(\r\n          columnIndex,\r\n          rowIndex\r\n        );\r\n      }\r\n    }\r\n\r\n    this.setState({ cells: newCells });\r\n  }\r\n\r\n  computeNewCellState(columnIndex, rowIndex) {\r\n    const aliveNeighboursAmount = this.computeAliveNeighboursAmount(\r\n      columnIndex,\r\n      rowIndex\r\n    );\r\n    const currentCellState = this.state.cells[columnIndex][rowIndex];\r\n\r\n    if (currentCellState === GameOfLife.cellState.ALIVE) {\r\n      if (aliveNeighboursAmount < 2) {\r\n        return GameOfLife.cellState.DEAD;\r\n      } else if (aliveNeighboursAmount === 2 || aliveNeighboursAmount === 3) {\r\n        return GameOfLife.cellState.ALIVE;\r\n      } else if (aliveNeighboursAmount > 3) {\r\n        return GameOfLife.cellState.DEAD;\r\n      }\r\n    } else {\r\n      if (aliveNeighboursAmount === 3) {\r\n        return GameOfLife.cellState.ALIVE;\r\n      }\r\n    }\r\n\r\n    return GameOfLife.cellState.DEAD;\r\n  }\r\n\r\n  computeAliveNeighboursAmount(columnIndex, rowIndex) {\r\n    let aliveNeighboursAmount = 0;\r\n\r\n    const neighbourOffsets = [\r\n      [-1, 0], // left\r\n      [-1, 1], // top left\r\n      [0, 1], // top\r\n      [1, 1], // top right\r\n      [1, 0], // right\r\n      [1, -1], // bottom right\r\n      [0, -1], // bottom\r\n      [-1, -1], // bottom left\r\n    ];\r\n\r\n    for (const neighbourOffsetKey in neighbourOffsets) {\r\n      const [xOffset, yOffset] = neighbourOffsets[neighbourOffsetKey];\r\n\r\n      let newColumnOffset = columnIndex + xOffset;\r\n      let newRowOffset = rowIndex + yOffset;\r\n\r\n      // Check boundaries\r\n      if (\r\n        newColumnOffset < 0 ||\r\n        newColumnOffset > GameOfLife.field.columnsAmount - 1\r\n      ) {\r\n        continue;\r\n      }\r\n      if (newRowOffset < 0 || newRowOffset > GameOfLife.field.rowsAmount - 1) {\r\n        continue;\r\n      }\r\n\r\n      const neighbourState = this.state.cells[newColumnOffset][newRowOffset];\r\n      if (neighbourState === GameOfLife.cellState.ALIVE) {\r\n        aliveNeighboursAmount++;\r\n      }\r\n    }\r\n\r\n    return aliveNeighboursAmount;\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region User Interactions\r\n\r\n  toggleCellState(columnIndex, rowIndex) {\r\n    const newCellsState = this.state.cells;\r\n\r\n    newCellsState[columnIndex][rowIndex] = !newCellsState[columnIndex][\r\n      rowIndex\r\n    ];\r\n\r\n    this.setState({ state: newCellsState });\r\n  }\r\n\r\n  toggleIsGameRunning() {\r\n    this.setState({ isGameRunning: !this.state.isGameRunning });\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region Rendering\r\n\r\n  renderCells() {\r\n    return (\r\n      <div className=\"GameOfLife__cells\">\r\n        {this.state.cells.map((rows, columnIndex) => {\r\n          return this.renderColumn(rows, columnIndex);\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderColumn(rows, columnIndex) {\r\n    return (\r\n      <div className=\"GameOfLife__column\" key={`column_${columnIndex}`}>\r\n        {rows.map((cellState, rowIndex) => {\r\n          const cellModifier =\r\n            cellState === GameOfLife.cellState.DEAD ? \"dead\" : \"alive\";\r\n          return (\r\n            <div\r\n              className={`GameOfLife__cell GameOfLife__cell--${cellModifier}`}\r\n              key={`cell_${columnIndex}_${rowIndex}`}\r\n              onClick={() => this.toggleCellState(columnIndex, rowIndex)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderStartGameButton() {\r\n    const buttonLabel = this.state.isGameRunning ? \"Stop\" : \"Start\";\r\n\r\n    return (\r\n      <button\r\n        className=\"GameOfLife__startGameButton\"\r\n        onClick={() => this.toggleIsGameRunning()}\r\n      >\r\n        {buttonLabel}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"GameOfLife\">\r\n        {this.renderStartGameButton()}\r\n        {this.renderCells()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // endregion\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameOfLife from \"./GameOfLife/GameOfLife\";\n\nReactDOM.render(<GameOfLife />, document.getElementById(\"root\"));\n"],"sourceRoot":""}